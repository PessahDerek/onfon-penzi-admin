/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthAuthImport } from './routes/auth/auth'
import { Route as appAppLayoutImport } from './routes/(app)/_app-layout'
import { Route as appAppLayoutIndexImport } from './routes/(app)/_app-layout/index'
import { Route as appAppLayoutUsersImport } from './routes/(app)/_app-layout/users'
import { Route as appAppLayoutMessagesImport } from './routes/(app)/_app-layout/messages'

// Create Virtual Routes

const appImport = createFileRoute('/(app)')()

// Create/Update Routes

const appRoute = appImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const AuthAuthRoute = AuthAuthImport.update({
  id: '/auth/auth',
  path: '/auth/auth',
  getParentRoute: () => rootRoute,
} as any)

const appAppLayoutRoute = appAppLayoutImport.update({
  id: '/_app-layout',
  getParentRoute: () => appRoute,
} as any)

const appAppLayoutIndexRoute = appAppLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appAppLayoutRoute,
} as any)

const appAppLayoutUsersRoute = appAppLayoutUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => appAppLayoutRoute,
} as any)

const appAppLayoutMessagesRoute = appAppLayoutMessagesImport.update({
  id: '/messages',
  path: '/messages',
  getParentRoute: () => appAppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_app-layout': {
      id: '/(app)/_app-layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appAppLayoutImport
      parentRoute: typeof appRoute
    }
    '/auth/auth': {
      id: '/auth/auth'
      path: '/auth/auth'
      fullPath: '/auth/auth'
      preLoaderRoute: typeof AuthAuthImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_app-layout/messages': {
      id: '/(app)/_app-layout/messages'
      path: '/messages'
      fullPath: '/messages'
      preLoaderRoute: typeof appAppLayoutMessagesImport
      parentRoute: typeof appAppLayoutImport
    }
    '/(app)/_app-layout/users': {
      id: '/(app)/_app-layout/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof appAppLayoutUsersImport
      parentRoute: typeof appAppLayoutImport
    }
    '/(app)/_app-layout/': {
      id: '/(app)/_app-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appAppLayoutIndexImport
      parentRoute: typeof appAppLayoutImport
    }
  }
}

// Create and export the route tree

interface appAppLayoutRouteChildren {
  appAppLayoutMessagesRoute: typeof appAppLayoutMessagesRoute
  appAppLayoutUsersRoute: typeof appAppLayoutUsersRoute
  appAppLayoutIndexRoute: typeof appAppLayoutIndexRoute
}

const appAppLayoutRouteChildren: appAppLayoutRouteChildren = {
  appAppLayoutMessagesRoute: appAppLayoutMessagesRoute,
  appAppLayoutUsersRoute: appAppLayoutUsersRoute,
  appAppLayoutIndexRoute: appAppLayoutIndexRoute,
}

const appAppLayoutRouteWithChildren = appAppLayoutRoute._addFileChildren(
  appAppLayoutRouteChildren,
)

interface appRouteChildren {
  appAppLayoutRoute: typeof appAppLayoutRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appAppLayoutRoute: appAppLayoutRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof appAppLayoutIndexRoute
  '/auth/auth': typeof AuthAuthRoute
  '/messages': typeof appAppLayoutMessagesRoute
  '/users': typeof appAppLayoutUsersRoute
}

export interface FileRoutesByTo {
  '/auth/auth': typeof AuthAuthRoute
  '/messages': typeof appAppLayoutMessagesRoute
  '/users': typeof appAppLayoutUsersRoute
  '/': typeof appAppLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_app-layout': typeof appAppLayoutRouteWithChildren
  '/auth/auth': typeof AuthAuthRoute
  '/(app)/_app-layout/messages': typeof appAppLayoutMessagesRoute
  '/(app)/_app-layout/users': typeof appAppLayoutUsersRoute
  '/(app)/_app-layout/': typeof appAppLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/auth' | '/messages' | '/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth/auth' | '/messages' | '/users' | '/'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/_app-layout'
    | '/auth/auth'
    | '/(app)/_app-layout/messages'
    | '/(app)/_app-layout/users'
    | '/(app)/_app-layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRoute: typeof appRouteWithChildren
  AuthAuthRoute: typeof AuthAuthRoute
}

const rootRouteChildren: RootRouteChildren = {
  appRoute: appRouteWithChildren,
  AuthAuthRoute: AuthAuthRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/auth/auth"
      ]
    },
    "/(app)": {
      "filePath": "(app)",
      "children": [
        "/(app)/_app-layout"
      ]
    },
    "/(app)/_app-layout": {
      "filePath": "(app)/_app-layout.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_app-layout/messages",
        "/(app)/_app-layout/users",
        "/(app)/_app-layout/"
      ]
    },
    "/auth/auth": {
      "filePath": "auth/auth.tsx"
    },
    "/(app)/_app-layout/messages": {
      "filePath": "(app)/_app-layout/messages.tsx",
      "parent": "/(app)/_app-layout"
    },
    "/(app)/_app-layout/users": {
      "filePath": "(app)/_app-layout/users.tsx",
      "parent": "/(app)/_app-layout"
    },
    "/(app)/_app-layout/": {
      "filePath": "(app)/_app-layout/index.tsx",
      "parent": "/(app)/_app-layout"
    }
  }
}
ROUTE_MANIFEST_END */
